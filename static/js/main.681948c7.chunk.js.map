{"version":3,"sources":["Components/Navbar.js","axios/index.js","api/index.js","Components/GamePanel/functions.js","Components/GamePanel/FildGame.js","Components/GamePanel/ControllPanel.js","Components/GamePanel/GamePanel.js","Components/WinnersList.js","Components/AboutGame.js","Router.js","App.js","utills/themes.js","serviceWorker.js","index.js"],"names":["ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","useStyles","makeStyles","theme","root","minHeight","marginBottom","spacing","padding","Navbar","classes","className","AppBar","position","Container","maxWidth","Toolbar","Grid","container","item","xs","Button","fullWidth","color","component","Link","to","axios","create","baseURL","get","data","post","generateRandom","num","Math","round","random","field","margin","display","justifyContent","flexWrap","boxSizing","cursor","border","green","backgroundColor","palette","success","dark","blue","primary","main","red","secondary","FildGame","currentIndex","isPlay","setWinner","delay","playerName","totalFilds","sizeCell","useState","randomCeil","setRandomCeil","timerRef","useRef","changeColorCell","newArr","checkWinner","filter","i","length","useEffect","clearTimeout","current","go","setTimeout","gameApi","date","Date","now","winner","catch","err","console","log","aria-hidden","style","width","onClick","e","index","id","role","Array","fill","map","_","height","key","defaultProps","controllPanel","marginTop","ControllPanel","option","handleCancel","start","setMainState","mainState","valueSelect","setValueSelect","valueInput","setValueInput","isDisabled","buttonName","justify","lg","FormControl","InputLabel","Select","labelId","value","onChange","obj","currentOption","handleSelect","MenuItem","Object","entries","TextField","label","str","handleInput","ButtonGroup","variant","disabled","PropTypes","shape","zIndex","GamePanel","setOption","intervalRef","generateRandomIndex","arr","isArray","count","setInterval","then","res","message","clearInterval","len","lenght","numberArray","splice","cells","user","Alert","severity","onClose","background","paper","WinnersList","winnersList","setWinnersList","List","sort","a","b","Fragment","ListItem","alignItems","ListItemText","toLocaleString","Divider","AboutGame","Typography","align","paragraph","Router","path","exact","createMuiTheme","light","contrastText","typography","htmlFontSize","useNextVariants","fontSize","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"qQAeA,SAASA,EAAgBC,GAAQ,IACvBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OACZC,EAAUC,YAAiB,CAC/BC,mBAAmB,EACnBC,UAAW,EACXC,OAAQL,EAASA,SAAWM,IAG9B,OAAOC,IAAMC,aAAaT,EAAU,CAClCU,UAAWR,EAAU,EAAI,IAS7B,IAAMS,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAW,GACXC,aAAcH,EAAMI,QAAQ,GAC5BC,QAAS,OAwCEC,EApCA,SAACpB,GACd,IAAMqB,EAAUT,IAChB,OACE,kBAACb,EAAD,iBAAqBC,EAArB,CAA4BsB,UAAWD,EAAQN,OAC7C,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,WAAS,EAACC,MAAM,UAAUC,UAAWC,IAAMC,GAAG,KAAtD,UAIF,kBAACT,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,WAAS,EAACC,MAAM,UAAUC,UAAWC,IAAMC,GAAG,SAAtD,SAIF,kBAACT,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,UACNC,UAAWC,IACXC,GAAG,YAJL,kB,yCC1DDC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,sDCDI,EACR,kBAAMF,EAAMG,IAAI,kBADR,EAED,kBAAMH,EAAMG,IAAI,kBAFf,EAGP,SAACC,GAAD,OAAUJ,EAAMK,KAAK,gBAAiBD,I,QCLxCE,EAAiB,SAACC,GAAD,OAASC,KAAKC,MAAMD,KAAKE,SAAWH,ICOrDjC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmC,MAAO,CACLC,OAAQ,SACRC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACVC,UAAW,aACXC,OAAQ,OACRtC,aAAcH,EAAMI,QAAQ,GAC5BsC,OAAQ,oBAEVC,MAAO,CACLC,gBAAiB5C,EAAM6C,QAAQC,QAAQC,MAEzCC,KAAM,CACJJ,gBAAiB5C,EAAM6C,QAAQI,QAAQC,MAEzCC,IAAK,CACHP,gBAAiB5C,EAAM6C,QAAQO,UAAUF,UAI7C,SAASG,EAAT,GAOI,IANFC,EAMC,EANDA,aACAC,EAKC,EALDA,OACAC,EAIC,EAJDA,UACArB,EAGC,EAHDA,MACAsB,EAEC,EAFDA,MACAC,EACC,EADDA,WAEMnD,EAAUT,IAKV6D,EAAU,SAAGxB,EAAS,GACtByB,GAFkB,IAE0B,GAAbzB,EAAQ,IAAUA,EAPtD,EAQmC0B,mBAAS,IAR5C,mBAQMC,EARN,KAQkBC,EARlB,KAUKC,EAAWC,iBAAO,MAMlBC,EAAkB,SAACZ,EAAclC,GACrC2C,GAAc,SAACD,GACb,IAAMK,EAAM,YAAOL,GAEnB,OADAK,EAAOb,GAAgBlC,EAChB,YAAI+C,OAITC,EAAc,SAAChD,GAAD,OAClB0C,EAAWO,QAAO,SAACC,GAAD,OAAOA,GAAKA,IAAMlD,KAAOmD,QAE7CC,qBAAU,WAKR,OAJKjB,IACHQ,EAAc,IACdU,aAAaT,EAASU,UAEjB,kBAAMD,aAAaT,EAASU,YAClC,CAACnB,IAEJiB,qBAAU,WAvBM,IAACG,EAwBfT,EAAgBZ,EAjCL,QASIqB,EAyBP,WACNT,EAAgBZ,EApCR,QAWVU,EAASU,QAAUE,WAAWD,EAAIlB,KA2BjC,CAACH,IAEJkB,qBAAU,WACJJ,EAvCQ,SAuCaT,EAAa,IACpCH,EAAUE,GACVe,aAAaT,EAASU,SACtBG,EACQ,CAAEC,KAAMC,KAAKC,MAAOC,OAAQvB,IACjCwB,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAE5Bf,EAhDM,OAgDaT,EAAa,IAClCH,EAAU,YACViB,aAAaT,EAASU,SACtBG,EACQ,CAAEC,KAAMC,KAAKC,MAAOC,OAAQ,aACjCC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAE/B,CAACrB,IAUJ,OACE,yBACEtD,UAAWD,EAAQ4B,MACnBmD,eAAA,EACAC,MAAO,CAAEC,MAlEW,KAmEpBC,QAAS,SAACC,GAAD,OAbGC,GAaYD,EAAEjG,OAAOmG,QAZ7BtC,IAAiBqC,IAGvBlB,aAAaT,EAASU,SACtBR,EAAgByB,EA5DJ,WAuDC,IAACA,GAcZE,KAAK,UAEJC,MAAMnC,GACJoC,KAAK,IACLC,KAAI,SAACC,EAAGN,GAAJ,OACH,yBACEnF,UAAWsD,EAAW6B,GAASpF,EAAQuD,EAAW6B,IAAU,GAC5DJ,MAAO,CACLC,MAAO5B,EACPsC,OAAQtC,EACRlB,OAAQ,oBAEVyD,IAAG,UAAKR,EAAQZ,KAAKC,OACrBY,GAAID,QAgBhBtC,EAAS+C,aAAe,CACtB9C,aAAc,EACdC,QAAQ,EACRC,UAAW,aACXrB,MAAO,EACPsB,MAAO,IACPC,WAAY,UAGCL,Q,sECpITvD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqG,cAAe,CACblG,aAAcH,EAAMI,QAAQ,GAC5BkG,UAAWtG,EAAMI,QAAQ,QAIvBmG,EAAgB,SAAC,GAMhB,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,UAEMrG,EAAUT,IADZ,EAEkC+D,mBAAS,IAF3C,mBAEGgD,EAFH,KAEgBC,EAFhB,OAGgCjD,mBAAS,IAHzC,mBAGGkD,EAHH,KAGeC,EAHf,KAgBIC,EAA2BL,EAA3BK,WAAYC,EAAeN,EAAfM,WACpB,OACE,kBAACvG,EAAA,EAAD,CAAWH,UAAWD,EAAQ8F,cAAezF,SAAS,MACpD,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACoG,QAAQ,gBAAgB/G,QAAS,GAC/C,kBAACU,EAAA,EAAD,CAAME,MAAI,EAACoG,GAAI,EAAGnG,GAAI,GACpB,kBAACoG,EAAA,EAAD,CAAalG,WAAS,GACpB,kBAACmG,EAAA,EAAD,CAAY1B,GAAG,gBAAf,eACA,kBAAC2B,EAAA,EAAD,CACEC,QAAQ,eACR5B,GAAG,eACH6B,MAAOZ,EACPa,SAAU,SAAChC,GAAD,OAtBD,SAACA,GACpB,IAAMiC,EAAMjC,EAAEjG,OAAOgI,MACrBX,EAAea,GACfhB,EAAa,eAAKC,EAAN,CAAiBgB,cAAeD,KAmBjBE,CAAanC,KAE9B,kBAACoC,EAAA,EAAD,CAAUL,MAAM,uBACfjB,GACCuB,OAAOC,QAAQxB,GAAQR,KAAI,SAAChF,GAAD,OACzB,kBAAC8G,EAAA,EAAD,CAAUL,MAAOzG,EAAK,GAAImF,IAAKnF,EAAK,IACjCA,EAAK,UAMlB,kBAACF,EAAA,EAAD,CAAME,MAAI,EAACoG,GAAI,EAAGnG,GAAI,GACpB,kBAACgH,EAAA,EAAD,CACE9G,WAAS,EACTyE,GAAG,iBACHsC,MAAM,YACNT,MAAOV,EACPW,SAAU,SAAChC,GAAD,OAlCA,SAACA,GACnB,IAAMyC,EAAMzC,EAAEjG,OAAOgI,MACrBT,EAAcmB,GACdxB,EAAa,eAAKC,EAAN,CAAiBlD,WAAYyE,KA+BhBC,CAAY1C,OAGjC,kBAAC5E,EAAA,EAAD,CAAME,MAAI,EAACoG,GAAI,EAAGnG,GAAI,IACpB,kBAACoH,EAAA,EAAD,CAAalH,WAAS,GACpB,kBAACD,EAAA,EAAD,CACEoH,QAAQ,YACRlH,MAAM,UACNqE,QAAS,kBAAMiB,KACf6B,SAAUtB,IAAeF,IAAeF,GAEvCK,GAEH,kBAAChG,EAAA,EAAD,CACEoH,QAAQ,YACRlH,MAAM,YACNqE,QAASgB,EACT8B,UAAWtB,GAJb,eAkCZV,EAAcH,aAAe,CAC3BI,OAAQgC,IAAUC,MAAM,CACtBtG,MAAO,EACPsB,MAAO,MAETgD,aAAc,aACdC,MAAO,aACPC,aAAc,aACdC,UAAW4B,IAAUC,MAAM,CACzBvB,WAAY,OACZD,YAAY,EACZ1D,QAAQ,EACRD,cAAe,EACf2B,OAAQ,KACR2C,cAAe,CAAEzF,MAAO,EAAGsB,MAAO,KAClCC,WAAY,YAID6C,QC/HTzG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJS,SAAU,WACVL,QAAS,GAEX4E,OAAQ,CACNqB,UAAW,MACX5F,SAAU,WACVgI,OAAQ,GACR,YAAa,CACXpC,UAAWtG,EAAMI,QAAQ,SAwHhBuI,MAnHf,WAAsB,IAAD,EACe9E,mBAAS,CACzCqD,WAAY,OACZD,YAAY,EACZ1D,QAAQ,EACRD,cAAe,EACf2B,OAAQ,KACR2C,cAAe,CAAEzF,MAAO,EAAGsB,MAAO,KAClCC,WAAY,WARK,mBACZkD,EADY,KACDD,EADC,OAUS9C,mBAAS,MAVlB,mBAUZ2C,EAVY,KAUJoC,EAVI,KAWbC,EAAc5E,iBAAO,MAXR,EAYM2C,EAAUgB,cAA3BzF,EAZW,EAYXA,MAAOsB,EAZI,EAYJA,MAKTlD,EAAUT,IAEVgJ,EAAsB,SAACC,GAC3B,GAAKjD,MAAMkD,QAAQD,GAAnB,EAGgC,IAA5BnC,EAAUtD,cACZqD,EAAa,eAAKC,EAAN,CAAiBtD,cAAe,EAAG2B,OAAQ,QAEzD0B,EAAa,eAAKC,EAAN,CAAiBK,YAAY,EAAMhC,OAAQ,QACvD,IAdkBN,EAcdsE,EAAQ,EAdMtE,EAeP,WACTgC,GAAa,SAACC,GAAD,sBAAqBA,EAArB,CAAgCtD,aAAcyF,EAAIE,QAC/DA,GAAS,GAhBXJ,EAAYnE,QAAUwE,YAAYvE,EAAIlB,KAoBxCe,qBAAU,WACRK,IAEGsE,MAAK,SAACC,GAAD,OAASR,EAAUQ,EAAIxH,SAC5BsD,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAIkE,cACjC,IAEH7E,qBAAU,WACJoC,EAAU3B,SACZqE,cAAcT,EAAYnE,SAC1BiC,GAAa,SAACC,GAAD,sBACRA,EADQ,CAEXM,WAAY,aACZD,YAAY,EACZ1D,QAAQ,UAGX,CAACqD,EAAU3B,SAEdT,qBAAU,WAIR,OAHIoC,EAAUrD,QACZuF,EHhFe,SAAC/G,EAAKwH,GAMzB,IALA,IAAMC,EAASD,GAAOxH,EAChB0H,EAAc3D,MAAM/D,GACvBgE,KAAK,IACLC,KAAI,SAACC,EAAG3B,GAAJ,OAAUA,KACb8E,EAAM,GACD9E,EAAI,EAAGA,EAAIkF,EAAQlF,GAAK,EAAG,CAClC,IAAMpC,EAASJ,EAAe2H,EAAYlF,OAAS,GACnD6E,EAAG,sBAAOA,GAAP,YAAeK,EAAYC,OAAOxH,EAAQ,KAE/C,OAAOkH,EGsEiBO,CAAM,KAAD,IAACxH,EAAS,KAE9B,kBAAMmH,cAAcT,EAAYnE,YACtC,CAACkC,EAAUrD,SAEd,IAWMC,EAAY,SAACoG,GAAD,OAAUjD,EAAa,eAAKC,EAAN,CAAiB3B,OAAQ2E,MAG/D3C,EAMEL,EANFK,WACA3D,EAKEsD,EALFtD,aACAC,EAIEqD,EAJFrD,OACA2D,EAGEN,EAHFM,WACAjC,EAEE2B,EAFF3B,OACAvB,EACEkD,EADFlD,WAEF,OACE,kBAAC/C,EAAA,EAAD,CAAWC,SAAS,KAAKJ,UAAWD,EAAQN,MAC1C,kBAAC,EAAD,CACEgH,WAAYA,EACZC,WAAYA,EACZT,aA1Be,WACnB6C,cAAcT,EAAYnE,SAC1BiC,EAAa,eAAKC,EAAN,CAAiBrD,QAAQ,EAAO0D,YAAY,MAyBpDP,MAtBQ,kBACZC,EAAa,eACRC,EADO,CAEVrD,QAAQ,MAoBNiD,OAAQA,EACRI,UAAWA,EACXD,aAAcA,IAEf1B,GACC,kBAACtE,EAAA,EAAD,CAAWH,UAAWD,EAAQ0E,QAC5B,kBAAC4E,EAAA,EAAD,CACEvB,QAAQ,SACRwB,SAAS,UACTC,QAAS,kBAAMvG,EAAU,QAH3B,8CAKWyB,IAIf,kBAAC,EAAD,CACE3B,aAAcA,EACdC,OAAQA,EACRC,UAAWA,EACXE,WAAYA,EACZvB,MAAOA,EACPsB,MAAOA,M,oCChIT3D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJuF,MAAO,OACPpD,OAAQ,SACRxB,SAAU,OACVgC,gBAAiB5C,EAAM6C,QAAQmH,WAAWC,WAqC/BC,EAjCK,WAAO,IAAD,EACcrG,mBAAS,MADvB,mBACjBsG,EADiB,KACJC,EADI,KAElB7J,EAAUT,IAShB,OAPA0E,qBAAU,WACRK,IAEGsE,MAAK,SAACC,GAAD,OAASgB,EAAehB,EAAIxH,SACjCsD,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAGD,kBAACkF,EAAA,EAAD,CAAM7J,UAAWD,EAAQN,MACtBkK,GACCpC,OAAOC,QAAQmC,GACZG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAG1F,KAAOyF,EAAE,GAAGzF,QAChCkB,KAAI,SAAChF,GAAD,OACH,kBAAC,IAAMyJ,SAAP,CAAgBtE,IAAKnF,EAAK,IACxB,kBAAC0J,EAAA,EAAD,CAAUC,WAAW,UACnB,kBAACC,EAAA,EAAD,CACE3H,QAAO,kBAAajC,EAAK,GAAGiE,QAC5B7B,UAAS,qBAAgB,IAAI2B,KAC3B/D,EAAK,GAAG8D,MACR+F,qBAGN,kBAACC,EAAA,EAAD,Y,SCjBCC,GAtBG,kBAChB,kBAACpK,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACoK,GAAA,EAAD,CAAYC,MAAM,SAAS3C,QAAQ,MAAnC,gBAGA,kBAAC0C,GAAA,EAAD,CAAY1C,QAAQ,MAApB,0BACA,kBAAC0C,GAAA,EAAD,CAAY1C,QAAQ,QAAQ4C,WAAS,GAArC,qxBCOWC,GAXA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAChK,UAAW0J,KACjC,kBAAC,IAAD,CAAOK,KAAK,QAAQ/J,UAAWsH,IAC/B,kBAAC,IAAD,CAAOyC,KAAK,WAAW/J,UAAW6I,IAClC,kBAAC,IAAD,CAAU3I,GAAG,QCHbvB,GAAQsL,ICTC,CACbzI,QAAS,CACPI,QAAS,CACPsI,MAAO,UACPrI,KAAM,UACNH,KAAM,UACNyI,aAAc,QAEhBpI,UAAW,CACTmI,MAAO,UACPrI,KAAM,UACNH,KAAM,UACNyI,aAAc,SAGlBC,WAAY,CACVC,aAAc,GACdC,iBAAiB,EACjBC,SAAU,MDECC,OATf,WACE,OACE,kBAAC,IAAD,CAAkB7L,MAAOA,IACvB,kBAAC,EAAD,MACA,kBAAC,GAAD,QEDc8L,QACW,cAA7B1M,OAAO2M,SAASC,UAEe,UAA7B5M,OAAO2M,SAASC,UAEhB5M,OAAO2M,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAACsD,GACLA,EAAaC,gBAEdxH,OAAM,SAACyH,GACNvH,QAAQuH,MAAMA,EAAMtD,a","file":"static/js/main.681948c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n// MUI stuff\r\nimport {\r\n  useScrollTrigger,\r\n  AppBar,\r\n  Grid,\r\n  Toolbar,\r\n  Button,\r\n  Container\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children, window } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n    target: window ? window() : undefined\r\n  });\r\n\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0\r\n  });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  window: PropTypes.func\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: 60,\r\n    marginBottom: theme.spacing(2),\r\n    padding: 0\r\n  }\r\n}));\r\n\r\nconst Navbar = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ElevationScroll {...props} className={classes.root}>\r\n      <AppBar position=\"sticky\">\r\n        <Container maxWidth=\"md\">\r\n          <Toolbar>\r\n            <Grid container>\r\n              <Grid item xs={4}>\r\n                <Button fullWidth color=\"inherit\" component={Link} to=\"/\">\r\n                  About\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Button fullWidth color=\"inherit\" component={Link} to=\"/game\">\r\n                  Game\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Button\r\n                  fullWidth\r\n                  color=\"inherit\"\r\n                  component={Link}\r\n                  to=\"/winners\"\r\n                >\r\n                  Winners\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n    </ElevationScroll>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://react-quiz-5cb66.firebaseio.com/gamebase/'\r\n});\r\n","import axios from '../axios';\r\n\r\nexport default {\r\n  get: () => axios.get('/options.json'),\r\n  getWinners: () => axios.get('/winners.json'),\r\n  post: (data) => axios.post('/winners.json', data)\r\n};\r\n","const generateRandom = (num) => Math.round(Math.random() * num);\r\n\r\nexport const cells = (num, len) => {\r\n  const lenght = len || num;\r\n  const numberArray = Array(num)\r\n    .fill('')\r\n    .map((_, i) => i);\r\n  let res = [];\r\n  for (let i = 0; i < lenght; i += 1) {\r\n    const random = generateRandom(numberArray.length - 1);\r\n    res = [...res, ...numberArray.splice(random, 1)];\r\n  }\r\n  return res;\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport gameApi from '../../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  field: {\r\n    margin: '0 auto',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    boxSizing: 'border-box',\r\n    cursor: 'copy',\r\n    marginBottom: theme.spacing(2),\r\n    border: '1.5px solid grey'\r\n  },\r\n  green: {\r\n    backgroundColor: theme.palette.success.dark\r\n  },\r\n  blue: {\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n  red: {\r\n    backgroundColor: theme.palette.secondary.main\r\n  }\r\n}));\r\n\r\nfunction FildGame({\r\n  currentIndex,\r\n  isPlay,\r\n  setWinner,\r\n  field,\r\n  delay,\r\n  playerName\r\n}) {\r\n  const classes = useStyles();\r\n  const red = 'red';\r\n  const blue = 'blue';\r\n  const green = 'green';\r\n  const WIDTH_GAME_FILD = 310;\r\n  const totalFilds = field ** 2;\r\n  const sizeCell = (WIDTH_GAME_FILD - (field + 1) * 3) / field;\r\n  const [randomCeil, setRandomCeil] = useState([]);\r\n\r\n  const timerRef = useRef(null);\r\n\r\n  const onTimer = (go) => {\r\n    timerRef.current = setTimeout(go, delay);\r\n  };\r\n\r\n  const changeColorCell = (currentIndex, color) => {\r\n    setRandomCeil((randomCeil) => {\r\n      const newArr = [...randomCeil];\r\n      newArr[currentIndex] = color;\r\n      return [...newArr];\r\n    });\r\n  };\r\n\r\n  const checkWinner = (color) =>\r\n    randomCeil.filter((i) => i && i === color).length;\r\n\r\n  useEffect(() => {\r\n    if (!isPlay) {\r\n      setRandomCeil([]);\r\n      clearTimeout(timerRef.current);\r\n    }\r\n    return () => clearTimeout(timerRef.current);\r\n  }, [isPlay]);\r\n\r\n  useEffect(() => {\r\n    changeColorCell(currentIndex, blue);\r\n    onTimer(() => {\r\n      changeColorCell(currentIndex, red);\r\n    });\r\n  }, [currentIndex]);\r\n\r\n  useEffect(() => {\r\n    if (checkWinner(green) > totalFilds / 2) {\r\n      setWinner(playerName);\r\n      clearTimeout(timerRef.current);\r\n      gameApi\r\n        .post({ date: Date.now(), winner: playerName })\r\n        .catch((err) => console.log(err));\r\n    }\r\n    if (checkWinner(red) > totalFilds / 2) {\r\n      setWinner('computer');\r\n      clearTimeout(timerRef.current);\r\n      gameApi\r\n        .post({ date: Date.now(), winner: 'computer' })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [randomCeil]);\r\n\r\n  const action = (index) => {\r\n    if (!(currentIndex === index)) {\r\n      return;\r\n    }\r\n    clearTimeout(timerRef.current);\r\n    changeColorCell(index, green);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classes.field}\r\n      aria-hidden\r\n      style={{ width: WIDTH_GAME_FILD }}\r\n      onClick={(e) => action(+e.target.id)}\r\n      role=\"button\"\r\n    >\r\n      {Array(totalFilds)\r\n        .fill('')\r\n        .map((_, index) => (\r\n          <div\r\n            className={randomCeil[index] ? classes[randomCeil[index]] : ''}\r\n            style={{\r\n              width: sizeCell,\r\n              height: sizeCell,\r\n              border: '1.5px solid grey'\r\n            }}\r\n            key={`${index + Date.now()}`}\r\n            id={index}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFildGame.propTypes = {\r\n  currentIndex: PropTypes.number,\r\n  isPlay: PropTypes.bool,\r\n  setWinner: PropTypes.func,\r\n  field: PropTypes.number,\r\n  delay: PropTypes.number,\r\n  playerName: PropTypes.string\r\n};\r\n\r\nFildGame.defaultProps = {\r\n  currentIndex: 0,\r\n  isPlay: false,\r\n  setWinner: () => {},\r\n  field: 3,\r\n  delay: 2000,\r\n  playerName: 'player'\r\n};\r\n\r\nexport default FildGame;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  MenuItem,\r\n  Grid,\r\n  Container,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  TextField,\r\n  Button,\r\n  ButtonGroup\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  controllPanel: {\r\n    marginBottom: theme.spacing(2),\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst ControllPanel = ({\r\n  option,\r\n  handleCancel,\r\n  start,\r\n  setMainState,\r\n  mainState\r\n}) => {\r\n  const classes = useStyles();\r\n  const [valueSelect, setValueSelect] = useState('');\r\n  const [valueInput, setValueInput] = useState('');\r\n\r\n  const handleSelect = (e) => {\r\n    const obj = e.target.value;\r\n    setValueSelect(obj);\r\n    setMainState({ ...mainState, currentOption: obj });\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    const str = e.target.value;\r\n    setValueInput(str);\r\n    setMainState({ ...mainState, playerName: str });\r\n  };\r\n  const { isDisabled, buttonName } = mainState;\r\n  return (\r\n    <Container className={classes.controllPanel} maxWidth=\"md\">\r\n      <Grid container justify=\"space-between\" spacing={2}>\r\n        <Grid item lg={3} xs={6}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"select-label\">Check level</InputLabel>\r\n            <Select\r\n              labelId=\"select-label\"\r\n              id=\"select-label\"\r\n              value={valueSelect}\r\n              onChange={(e) => handleSelect(e)}\r\n            >\r\n              <MenuItem value=\"Check game's level\" />\r\n              {option &&\r\n                Object.entries(option).map((item) => (\r\n                  <MenuItem value={item[1]} key={item[0]}>\r\n                    {item[0]}\r\n                  </MenuItem>\r\n                ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item lg={3} xs={6}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"standard-basic\"\r\n            label=\"Your name\"\r\n            value={valueInput}\r\n            onChange={(e) => handleInput(e)}\r\n          />\r\n        </Grid>\r\n        <Grid item lg={6} xs={12}>\r\n          <ButtonGroup fullWidth>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => start()}\r\n              disabled={isDisabled || !valueInput || !valueSelect}\r\n            >\r\n              {buttonName}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleCancel}\r\n              disabled={!isDisabled}\r\n            >\r\n              Cansel\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nControllPanel.propTypes = {\r\n  option: PropTypes.shape({\r\n    field: PropTypes.number,\r\n    delay: PropTypes.number\r\n  }),\r\n  handleCancel: PropTypes.func,\r\n  start: PropTypes.func,\r\n  setMainState: PropTypes.func,\r\n  mainState: PropTypes.shape({\r\n    buttonName: PropTypes.string,\r\n    isDisabled: PropTypes.bool,\r\n    isPlay: PropTypes.bool,\r\n    currentIndex: PropTypes.number,\r\n    winner: PropTypes.string,\r\n    currentOption: PropTypes.object,\r\n    playerName: PropTypes.string\r\n  })\r\n};\r\n\r\nControllPanel.defaultProps = {\r\n  option: PropTypes.shape({\r\n    field: 3,\r\n    delay: 2000\r\n  }),\r\n  handleCancel: () => {},\r\n  start: () => {},\r\n  setMainState: () => {},\r\n  mainState: PropTypes.shape({\r\n    buttonName: 'Play',\r\n    isDisabled: false,\r\n    isPlay: false,\r\n    currentIndex: -1,\r\n    winner: null,\r\n    currentOption: { field: 5, delay: 2000 },\r\n    playerName: 'player'\r\n  })\r\n};\r\n\r\nexport default ControllPanel;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport gameApi from '../../api';\r\n\r\nimport { cells } from './functions';\r\n\r\nimport FildGame from './FildGame';\r\nimport ControllPanel from './ControllPanel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: 'relative',\r\n    padding: 0\r\n  },\r\n  winner: {\r\n    marginTop: '10%',\r\n    position: 'absolute',\r\n    zIndex: 10,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2)\r\n    }\r\n  }\r\n}));\r\n\r\nfunction GamePanel() {\r\n  const [mainState, setMainState] = useState({\r\n    buttonName: 'Play',\r\n    isDisabled: false,\r\n    isPlay: false,\r\n    currentIndex: -1,\r\n    winner: null,\r\n    currentOption: { field: 5, delay: 2000 },\r\n    playerName: 'player'\r\n  });\r\n  const [option, setOption] = useState(null);\r\n  const intervalRef = useRef(null);\r\n  const { field, delay } = mainState.currentOption;\r\n  const onInterval = (go) => {\r\n    intervalRef.current = setInterval(go, delay);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const generateRandomIndex = (arr) => {\r\n    if (!Array.isArray(arr)) {\r\n      return;\r\n    }\r\n    if (mainState.currentIndex !== -1) {\r\n      setMainState({ ...mainState, currentIndex: -1, winner: null });\r\n    }\r\n    setMainState({ ...mainState, isDisabled: true, winner: null });\r\n    let count = 0;\r\n    onInterval(() => {\r\n      setMainState((mainState) => ({ ...mainState, currentIndex: arr[count] }));\r\n      count += 1;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    gameApi\r\n      .get()\r\n      .then((res) => setOption(res.data))\r\n      .catch((err) => console.log(err.message));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mainState.winner) {\r\n      clearInterval(intervalRef.current);\r\n      setMainState((mainState) => ({\r\n        ...mainState,\r\n        buttonName: 'Play again',\r\n        isDisabled: false,\r\n        isPlay: false\r\n      }));\r\n    }\r\n  }, [mainState.winner]);\r\n\r\n  useEffect(() => {\r\n    if (mainState.isPlay) {\r\n      generateRandomIndex(cells(field ** 2));\r\n    }\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [mainState.isPlay]);\r\n\r\n  const handleCancel = () => {\r\n    clearInterval(intervalRef.current);\r\n    setMainState({ ...mainState, isPlay: false, isDisabled: false });\r\n  };\r\n\r\n  const start = () =>\r\n    setMainState({\r\n      ...mainState,\r\n      isPlay: true\r\n    });\r\n\r\n  const setWinner = (user) => setMainState({ ...mainState, winner: user });\r\n\r\n  const {\r\n    isDisabled,\r\n    currentIndex,\r\n    isPlay,\r\n    buttonName,\r\n    winner,\r\n    playerName\r\n  } = mainState;\r\n  return (\r\n    <Container maxWidth=\"md\" className={classes.root}>\r\n      <ControllPanel\r\n        isDisabled={isDisabled}\r\n        buttonName={buttonName}\r\n        handleCancel={handleCancel}\r\n        start={start}\r\n        option={option}\r\n        mainState={mainState}\r\n        setMainState={setMainState}\r\n      />\r\n      {winner && (\r\n        <Container className={classes.winner}>\r\n          <Alert\r\n            variant=\"filled\"\r\n            severity=\"success\"\r\n            onClose={() => setWinner(null)}\r\n          >\r\n            Победил {winner}\r\n          </Alert>\r\n        </Container>\r\n      )}\r\n      <FildGame\r\n        currentIndex={currentIndex}\r\n        isPlay={isPlay}\r\n        setWinner={setWinner}\r\n        playerName={playerName}\r\n        field={field}\r\n        delay={delay}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GamePanel;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport gameApi from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    margin: '0 auto',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nconst WinnersList = () => {\r\n  const [winnersList, setWinnersList] = useState(null);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    gameApi\r\n      .getWinners()\r\n      .then((res) => setWinnersList(res.data))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {winnersList &&\r\n        Object.entries(winnersList)\r\n          .sort((a, b) => b[1].date - a[1].date)\r\n          .map((item) => (\r\n            <React.Fragment key={item[0]}>\r\n              <ListItem alignItems=\"center\">\r\n                <ListItemText\r\n                  primary={`Winner: ${item[1].winner}`}\r\n                  secondary={`Date game: ${new Date(\r\n                    item[1].date\r\n                  ).toLocaleString()}`}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n            </React.Fragment>\r\n          ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default WinnersList;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst AboutGame = () => (\r\n  <Container maxWidth=\"md\">\r\n    <Typography align=\"center\" variant=\"h5\">\r\n      Game In Dots\r\n    </Typography>\r\n    <Typography variant=\"h6\">We have next gameplay:</Typography>\r\n    <Typography variant=\"body2\" paragraph>\r\n      user set game difficulty and name press PLAY at a specified time interval\r\n      (in the delay field) a random square on the field is highlighted in blue\r\n      if the user managed to click on the square during this time - he turns\r\n      green, the player gets a point and the field changes color to green if\r\n      not, the field turns red and the point goes to the computer when a player\r\n      or computer paints >50% of all possible squares in his color - he becomes\r\n      the winner an inscription appears between the control buttons and the\r\n      playing field that the player (the name he entered) / computer won button\r\n      PLAY changes the caption to PLAY AGAIN result of the game need to be send\r\n      to server on this endpoint /winners in JSON with two fields winner and\r\n      date both strings. results in table should be auto update\r\n    </Typography>\r\n  </Container>\r\n);\r\n\r\nexport default AboutGame;\r\n","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport GamePanel from './Components/GamePanel/GamePanel';\r\nimport WinnersList from './Components/WinnersList';\r\nimport AboutGame from './Components/AboutGame';\r\n\r\nconst Router = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact component={AboutGame} />\r\n      <Route path=\"/game\" component={GamePanel} />\r\n      <Route path=\"/winners\" component={WinnersList} />\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\n\r\nimport Navbar from './Components/Navbar';\r\nimport Router from './Router';\r\n\r\nimport themeObject from './utills/themes';\r\n\r\nconst theme = createMuiTheme(themeObject);\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <Navbar />\r\n      <Router />\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default {\r\n  palette: {\r\n    primary: {\r\n      light: '#33c9dc',\r\n      main: '#00bcd4',\r\n      dark: '#008394',\r\n      contrastText: '#fff'\r\n    },\r\n    secondary: {\r\n      light: '#ff6333',\r\n      main: '#ff3d00',\r\n      dark: '#b22a00',\r\n      contrastText: '#fff'\r\n    }\r\n  },\r\n  typography: {\r\n    htmlFontSize: 16,\r\n    useNextVariants: true,\r\n    fontSize: 12\r\n  }\r\n};\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-use-before-define */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}