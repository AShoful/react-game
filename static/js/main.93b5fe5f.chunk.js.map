{"version":3,"sources":["Components/Navbar.js","Components/GamePanel/functions.js","Components/GamePanel/FildGame.js","Components/GamePanel/ControllPanel.js","Components/GamePanel/GamePanel.js","Components/WinnersList.js","Components/AboutGame.js","Router.js","App.js","utills/themes.js","serviceWorker.js","index.js"],"names":["ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","useStyles","makeStyles","theme","root","minHeight","marginBottom","spacing","padding","Navbar","classes","className","AppBar","position","Container","Toolbar","Grid","container","item","xs","Button","color","component","Link","to","generateRandom","num","Math","round","random","FildGame","currentIndex","isPlay","setWinner","field","delay","playerName","totalFilds","useState","randomCeil","setRandomCeil","timerRef","useRef","changeColorCell","newArr","checkWinner","filter","i","length","useEffect","clearTimeout","current","go","setTimeout","sizeCell","style","width","Array","fill","map","index","height","key","Date","now","onClick","action","role","formControl","display","flexDirection","justifyContent","margin","select","marginTop","minWidth","botton","ControllPanel","option","isDisabled","buttonName","handleCancel","start","valueSelect","setValueSelect","valueInput","setValueInput","FormControl","InputLabel","id","Select","labelId","value","onChange","e","MenuItem","Object","entries","TextField","label","button","variant","disabled","GamePanel","winner","currentOption","mainState","setMainState","setOption","intervalRef","generateRandomIndex","arr","isArray","count","setInterval","fetch","then","res","json","catch","err","console","log","message","clearInterval","len","lenght","numberArray","_","splice","cells","obj","str","user","WinnersList","AboutGame","Router","path","exact","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","htmlFontSize","useNextVariants","fontSize","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.93b5fe5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n// MUI stuff\r\nimport {\r\n  useScrollTrigger,\r\n  AppBar,\r\n  Grid,\r\n  Toolbar,\r\n  Button,\r\n  Container\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children, window } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n    target: window ? window() : undefined\r\n  });\r\n\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0\r\n  });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  window: PropTypes.func\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: 60,\r\n    marginBottom: theme.spacing(2),\r\n    padding: 0\r\n  }\r\n}));\r\n\r\nconst Navbar = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ElevationScroll {...props} className={classes.root}>\r\n      <AppBar position=\"sticky\">\r\n        <Container>\r\n          <Toolbar>\r\n            <Grid container>\r\n              <Grid item xs={4}>\r\n                <Button color=\"inherit\" component={Link} to=\"/\">\r\n                  About\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Button color=\"inherit\" component={Link} to=\"/game\">\r\n                  Game\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Button color=\"inherit\" component={Link} to=\"/winners\">\r\n                  Winners\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n    </ElevationScroll>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const generateRandom = (num) => Math.round(Math.random() * num);\r\n\r\nexport const cells = (num, len) => {\r\n  const lenght = len || num;\r\n  const numberArray = Array(num)\r\n    .fill('')\r\n    .map((_, i) => i);\r\n  let res = [];\r\n  for (let i = 0; i < lenght; i += 1) {\r\n    const random = generateRandom(numberArray.length - 1);\r\n    res = [...res, ...numberArray.splice(random, 1)];\r\n  }\r\n  return res;\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/control-has-associated-label */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './FildGame.css';\r\n\r\nfunction FildGame({\r\n  currentIndex,\r\n  isPlay,\r\n  setWinner,\r\n  field,\r\n  delay,\r\n  playerName\r\n}) {\r\n  const WIDTH_GAME_FILD = 310;\r\n  const totalFilds = field ** 2;\r\n  const [randomCeil, setRandomCeil] = useState([]);\r\n\r\n  const timerRef = useRef(null);\r\n\r\n  const onTimer = (go) => {\r\n    timerRef.current = setTimeout(go, delay);\r\n  };\r\n\r\n  const changeColorCell = (currentIndex, color) => {\r\n    setRandomCeil((randomCeil) => {\r\n      const newArr = [...randomCeil];\r\n      newArr[currentIndex] = color;\r\n      return [...newArr];\r\n    });\r\n  };\r\n\r\n  const checkWinner = (color) =>\r\n    randomCeil.filter((i) => i && i === color).length;\r\n\r\n  useEffect(() => {\r\n    if (!isPlay) {\r\n      setRandomCeil([]);\r\n      clearTimeout(timerRef.current);\r\n    }\r\n    return () => clearTimeout(timerRef.current);\r\n  }, [isPlay]);\r\n\r\n  useEffect(() => {\r\n    changeColorCell(currentIndex, 'blue');\r\n    onTimer(() => {\r\n      changeColorCell(currentIndex, 'red');\r\n    });\r\n    // return () => clearTimeout(timerRef.current);\r\n  }, [currentIndex]);\r\n\r\n  useEffect(() => {\r\n    if (checkWinner('green') > totalFilds / 2) {\r\n      setWinner(playerName);\r\n      clearTimeout(timerRef.current);\r\n    }\r\n    if (checkWinner('red') > totalFilds / 2) {\r\n      setWinner('computer');\r\n      clearTimeout(timerRef.current);\r\n    }\r\n  }, [field, randomCeil, setWinner]);\r\n\r\n  const action = (index) => {\r\n    if (!(currentIndex === index)) {\r\n      return;\r\n    }\r\n    clearTimeout(timerRef.current);\r\n    changeColorCell(index, 'green');\r\n  };\r\n\r\n  const sizeCell = (WIDTH_GAME_FILD - field * 2) / field;\r\n  return (\r\n    <div className=\"field\" style={{ width: WIDTH_GAME_FILD }}>\r\n      {Array(totalFilds)\r\n        .fill('')\r\n        .map((item, index) => (\r\n          <div\r\n            className={randomCeil[index] ? `ceil ${randomCeil[index]}` : 'ceil'}\r\n            style={{ width: sizeCell, height: sizeCell }}\r\n            key={`${index + Date.now()}`}\r\n            onClick={() => action(index)}\r\n            role=\"button\"\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FildGame;\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    margin: theme.spacing(2)\r\n  },\r\n  select: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 220\r\n  },\r\n  botton: {\r\n    display: 'inline-block',\r\n    minWidth: 120\r\n  }\r\n}));\r\n\r\nconst ControllPanel = ({\r\n  option,\r\n  isDisabled,\r\n  buttonName,\r\n  handleCancel,\r\n  start\r\n}) => {\r\n  const classes = useStyles();\r\n  const [valueSelect, setValueSelect] = useState('');\r\n  const [valueInput, setValueInput] = useState('');\r\n\r\n  return (\r\n    <FormControl className={classes.formControl}>\r\n      <InputLabel id=\"select-label\">Check game's level</InputLabel>\r\n      <Select\r\n        className={classes.select}\r\n        labelId=\"select-label\"\r\n        id=\"select-label\"\r\n        value={valueSelect}\r\n        onChange={(e) => setValueSelect(e.target.value)}\r\n      >\r\n        <MenuItem value=\"Check game's level\" />\r\n        {option &&\r\n          Object.entries(option).map((item) => (\r\n            <MenuItem value={item[1]} key={item[0]}>\r\n              {item[0]}\r\n            </MenuItem>\r\n          ))}\r\n      </Select>\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Enter your name\"\r\n        value={valueInput}\r\n        onChange={(e) => setValueInput(e.target.value)}\r\n      />\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => start(valueSelect, valueInput)}\r\n        disabled={isDisabled}\r\n      >\r\n        {buttonName}\r\n      </Button>\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={handleCancel}\r\n      >\r\n        Cansel\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default ControllPanel;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/control-has-associated-label */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { cells } from './functions';\r\n\r\nimport FildGame from './FildGame';\r\nimport ControllPanel from './ControllPanel';\r\n\r\nimport './GamePanel.css';\r\n\r\nfunction GamePanel() {\r\n  // const field = 4;\r\n  // const delay = 2000;\r\n\r\n  const [mainState, setMainState] = useState({\r\n    buttonName: 'Play',\r\n    isDisabled: false,\r\n    isPlay: false,\r\n    currentIndex: -1,\r\n    winner: null,\r\n    currentOption: { field: 4, delay: 2000 },\r\n    playerName: 'player'\r\n  });\r\n\r\n  const [option, setOption] = useState(null);\r\n\r\n  const intervalRef = useRef(null);\r\n  const { field, delay } = mainState.currentOption;\r\n  const onInterval = (go) => {\r\n    intervalRef.current = setInterval(go, delay);\r\n  };\r\n\r\n  const generateRandomIndex = (arr) => {\r\n    if (!Array.isArray(arr)) {\r\n      return;\r\n    }\r\n    if (mainState.currentIndex !== -1) {\r\n      setMainState({ ...mainState, currentIndex: -1, winner: null });\r\n    }\r\n    setMainState({ ...mainState, isDisabled: true, winner: null });\r\n    let count = 0;\r\n    onInterval(() => {\r\n      setMainState((mainState) => ({ ...mainState, currentIndex: arr[count] }));\r\n      count += 1;\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    fetch('https://starnavi-frontend-test-task.herokuapp.com/game-settings')\r\n      .then((res) => res.json())\r\n      .then((res) => setOption(res))\r\n      .catch((err) => console.log(err.message));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mainState.winner) {\r\n      clearInterval(intervalRef.current);\r\n      setMainState((mainState) => ({\r\n        ...mainState,\r\n        buttonName: 'Play again',\r\n        isDisabled: false,\r\n        isPlay: false\r\n      }));\r\n    }\r\n  }, [mainState.winner]);\r\n\r\n  useEffect(() => {\r\n    if (mainState.isPlay) {\r\n      generateRandomIndex(cells(field ** 2));\r\n    }\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [mainState.isPlay]);\r\n\r\n  const handleCancel = () => {\r\n    clearInterval(intervalRef.current);\r\n    setMainState({ ...mainState, isPlay: false, isDisabled: false });\r\n  };\r\n\r\n  const start = (obj, str) =>\r\n    setMainState({\r\n      ...mainState,\r\n      isPlay: true,\r\n      currentOption: obj,\r\n      playerName: str\r\n    });\r\n  const setWinner = (user) => setMainState({ ...mainState, winner: user });\r\n\r\n  const {\r\n    isDisabled,\r\n    currentIndex,\r\n    isPlay,\r\n    buttonName,\r\n    winner,\r\n    playerName\r\n  } = mainState;\r\n  return (\r\n    <div className=\"App\">\r\n      <ControllPanel\r\n        isDisabled={isDisabled}\r\n        buttonName={buttonName}\r\n        handleCancel={handleCancel}\r\n        start={start}\r\n        option={option}\r\n      />\r\n      {winner && <p> Победил {winner} </p>}\r\n      <FildGame\r\n        currentIndex={currentIndex}\r\n        isPlay={isPlay}\r\n        setWinner={setWinner}\r\n        playerName={playerName}\r\n        field={field}\r\n        delay={delay}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GamePanel;\r\n","import React from 'react';\r\n\r\nconst WinnersList = () => <div>'Winnerlist'</div>;\r\n\r\nexport default WinnersList;\r\n","import React from 'react';\r\n\r\nconst AboutGame = () => <div>About Game</div>;\r\n\r\nexport default AboutGame;\r\n","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport GamePanel from './Components/GamePanel/GamePanel';\r\nimport WinnersList from './Components/WinnersList';\r\nimport AboutGame from './Components/AboutGame';\r\n\r\nconst Router = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact component={AboutGame} />\r\n      <Route path=\"/game\" component={GamePanel} />\r\n      <Route path=\"/winners\" component={WinnersList} />\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\n\r\nimport Navbar from './Components/Navbar';\r\nimport Router from './Router';\r\n\r\nimport themeObject from './utills/themes';\r\n\r\nconst theme = createMuiTheme(themeObject);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MuiThemeProvider theme={theme}>\r\n        <Navbar />\r\n        <Router />\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default {\r\n  palette: {\r\n    primary: {\r\n      light: '#33c9dc',\r\n      main: '#00bcd4',\r\n      dark: '#008394',\r\n      contrastText: '#fff'\r\n    },\r\n    secondary: {\r\n      light: '#ff6333',\r\n      main: '#ff3d00',\r\n      dark: '#b22a00',\r\n      contrastText: '#fff'\r\n    }\r\n  },\r\n  typography: {\r\n    htmlFontSize: 16,\r\n    useNextVariants: true,\r\n    fontSize: 12\r\n  }\r\n};\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-use-before-define */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}